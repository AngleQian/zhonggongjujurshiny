library(shiny)
# source("../PaymentScheduleCalculator.R")

# -------------------- Start of PaymentScheduleCalculator.R --------------------
library(ggplot2)

payments_schedule = function(annual_interest_rate, principal, years) {
  #first calculate monthly interest rate 
  #second calculate the constant monthly payment amount
  monthly_interest_rate = annual_interest_rate / 12
  payment_months = years * 12
  a = (1 + monthly_interest_rate) ^ payment_months - 1
  total_payment = principal * monthly_interest_rate * (a + 1) / a
  
  interest_payment = principal_payment = unpaid_balance = total_payments = vector("numeric", payment_months)
  upb = principal 
  for (i in 1:payment_months) {
    intrst = upb * monthly_interest_rate
    pricil = total_payment - intrst
    upb = upb - pricil
    
    
    interest_payment[i] = intrst
    principal_payment[i] = pricil
    unpaid_balance[i] = upb
    total_payments[i] = total_payment
  }
  
  df = data.frame(1:payment_months, interest_payment, principal_payment, total_payments, unpaid_balance)
  df
}

data_frame_plotter = function(data_frame) {
  knitr::kable(data_frame)
}

# data_frame_plotter(payments_schedule(.......))

vec_to_const_ratio = function(vec, denom) {
  len = length(vec)
  ret = vector("numeric", len)
  for (i in 1:len) {
    ret[i] = vec[i] / denom
  }
  ret
}

quarterly_upb_to_loanamt = function(annual_interest_rate, principal, years, years_plot = years) {
  df = payments_schedule(annual_interest_rate, principal, years)
  # ratio_vec = vec_to_const_ratio(unlist(df[5], use.names=FALSE), principal)
  ratio_vec = vec_to_const_ratio(df[[5]], principal)
  ratio_vec_ = vector("numeric", length(ratio_vec) / 3)
  
  j = 1
  for (i in seq(1, length(ratio_vec), by=3)) {
    ratio_vec_[j] = (ratio_vec[i] + ratio_vec[(i + 1)] + ratio_vec[(i + 2)]) / 3
    j = j + 1
  }
  
  plot_length = years_plot * 4
  data_frame_ = data.frame("Quarters" = 1:plot_length, "MLTV" = ratio_vec_[1:plot_length])
  data_frame_
  # ggplot(data_frame_, mapping = aes(x=Quarters, y=MLTV)) + geom_point()
}

quarterly_upb = function(annual_interest_rate, principal, years, years_plot = years) {
  df = payments_schedule(annual_interest_rate, principal, years)
  ret = df[[5]]
  ret_ = vector("numeric", length(ret) / 3)
  
  j = 1
  for (i in seq(1, length(ret), by=3)) {
    ret_[j] = (ret[i] + ret[i + 1] + ret[i + 2]) / 3
    j = j + 1
  }
  
  plot_length = years_plot * 4
  data_frame_ = data.frame("Quarters" = 1:plot_length, "UPB" = ret_[1:plot_length])
  data_frame_
}
# -------------------- End of PaymentScheduleCalculator.R --------------------

ui <- fluidPage(
  titlePanel("Quarterly MLTV Grapher"),
  
  sidebarLayout(
    # Sidebar panel for inputs ----
    sidebarPanel(
      radioButtons("option", "Graph type",
                   c("Unpaid Balance" = "upb",
                     "MLTV" = "mltv")),
      textInput("principal", "Initial Principal Amount of the Loan", value = "200000"),
      textInput("interest", "Annual interest rate", value = "0.0325", placeholder = "enter 0.01 for 1%"),
      textInput("years", "Mortgage Term", value = "5", placeholder = "years"),
      textInput("years_graph", "Number of years to graph", value = "5")
    ),
    
    mainPanel(
      plotOutput(outputId = "mltv_plot", 
                 click = "plot_click",
                 dblclick = "plot_dblclick",
                 hover = "plot_hover",
                 brush = "plot_brush"),
      verbatimTextOutput("info")
      
    )
  )
)

server <- function(input, output) {
  output$mltv_plot <- renderPlot({
    interest = as.numeric(input$interest)
    principal = as.numeric(input$principal)
    years = as.numeric(input$years)
    years_graph = as.numeric(input$years_graph)
    years_graph_ = if(years_graph > years) years else years_graph
    
    if (input$option == "upb") {
      data_frame = quarterly_upb(interest, principal, years, years_graph_)
      ggplot(data_frame, mapping = aes(x=Quarters, y=UPB)) + geom_point()
    } else if (input$option == "mltv") {
      data_frame = quarterly_upb_to_loanamt(interest, principal, years, years_graph_)
      ggplot(data_frame, mapping = aes(x=Quarters, y=MLTV)) + geom_point()
    }
  })
  
  # output$info <- renderText({
  #   xy_str <- function(e) {
  #     if(is.null(e)) return("NULL\n")
  #     paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
  #   }
  #   xy_range_str <- function(e) {
  #     if(is.null(e)) return("NULL\n")
  #     paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1), 
  #            " ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
  #   }
  #   
  #   paste0(
  #     "click: ", xy_str(input$plot_click),
  #     "dblclick: ", xy_str(input$plot_dblclick),
  #     "hover: ", xy_str(input$plot_hover),
  #     "brush: ", xy_range_str(input$plot_brush)
  #   )
  # })
  #
}

shinyApp(ui, server)


library(shiny)
# source("../PaymentScheduleCalculator.R")

# -------------------- Start of PaymentScheduleCalculator.R --------------------
library(ggplot2)

payments_schedule = function(annual_interest_rate, principal, years) {
  #first calculate monthly interest rate 
  #second calculate the constant monthly payment amount
  monthly_interest_rate = annual_interest_rate / 12
  payment_months = years * 12
  a = (1 + monthly_interest_rate) ^ payment_months - 1
  total_payment = principal * monthly_interest_rate * (a + 1) / a
  
  interest_payment = principal_payment = unpaid_balance = total_payments = vector("numeric", payment_months)
  upb = principal 
  for (i in 1:payment_months) {
    intrst = upb * monthly_interest_rate
    pricil = total_payment - intrst
    upb = upb - pricil
    
    
    interest_payment[i] = intrst
    principal_payment[i] = pricil
    unpaid_balance[i] = upb
    total_payments[i] = total_payment
  }
  
  df = data.frame(1:payment_months, interest_payment, principal_payment, total_payments, unpaid_balance)
  df
}

data_frame_plotter = function(data_frame) {
  knitr::kable(data_frame)
}

# data_frame_plotter(payments_schedule(.......))

vec_to_const_ratio = function(vec, denom) {
  len = length(vec)
  ret = vector("numeric", len)
  for (i in 1:len) {
    ret[i] = vec[i] / denom
  }
  ret
}

quarterly_upb_to_loanamt = function(annual_interest_rate, principal, years, years_plot = years) {
  df = payments_schedule(annual_interest_rate, principal, years)
  # ratio_vec = vec_to_const_ratio(unlist(df[5], use.names=FALSE), principal)
  ratio_vec = vec_to_const_ratio(df[[5]], principal)
  ratio_vec_ = vector("numeric", length(ratio_vec) / 3)
  
  j = 1
  for (i in seq(1, length(ratio_vec), by=3)) {
    ratio_vec_[j] = (ratio_vec[i] + ratio_vec[(i + 1)] + ratio_vec[(i + 2)]) / 3
    j = j + 1
  }
  
  plot_length = years_plot * 4
  data_frame_ = data.frame("Quarters" = 1:plot_length, "MLTV" = ratio_vec_[1:plot_length])
  data_frame_
  # ggplot(data_frame_, mapping = aes(x=Quarters, y=MLTV)) + geom_point()
}

quarterly_upb = function(annual_interest_rate, principal, years, years_plot = years) {
  df = payments_schedule(annual_interest_rate, principal, years)
  ret = df[[5]]
  ret_ = vector("numeric", length(ret) / 3)
  
  j = 1
  for (i in seq(1, length(ret), by=3)) {
    ret_[j] = (ret[i] + ret[i + 1] + ret[i + 2]) / 3
    j = j + 1
  }
  
  plot_length = years_plot * 4
  data_frame_ = data.frame("Quarters" = 1:plot_length, "UPB" = ret_[1:plot_length])
  data_frame_
}
# -------------------- End of PaymentScheduleCalculator.R --------------------

ui <- fluidPage(
  titlePanel("Quarterly MLTV Grapher"),
  
  sidebarLayout(
    # Sidebar panel for inputs ----
    sidebarPanel(
      radioButtons("option", "Graph type",
                   c("Unpaid Balance" = "upb",
                     "MLTV" = "mltv")),
      textInput("principal", "Initial Principal Amount of the Loan", value = "200000"),
      fluidRow(
        column(
          width = 12,
          div(style = "white-space: nowrap", 
              div(style="display: inline-block; width: 95%;",
                  textInput("interest", "Annual interest rate", value = "3.25", placeholder = "enter 1 for 1%"),
                 ),
              h5('%', style="display:inline-block")
              )
          ),
        ),
        textInput("years", "Mortgage Term", value = "5", placeholder = "years"),
        textInput("years_graph", "Number of years to graph", value = "5")
    ),
    
    
    mainPanel(
      plotOutput(outputId = "mltv_plot", 
                 click = "plot_click",
                 dblclick = "plot_dblclick",
                 hover = "plot_hover",
                 brush = "plot_brush"),
      verbatimTextOutput("info")
      
    )
  )
)

server <- function(input, output) {
  output$mltv_plot <- renderPlot({
    interest = as.numeric(input$interest) / 100
    principal = as.numeric(input$principal)
    years = as.numeric(input$years)
    years_graph = as.numeric(input$years_graph)
    years_graph_ = if(years_graph > years) years else years_graph
    
    if (input$option == "upb") {
      data_frame = quarterly_upb(interest, principal, years, years_graph_)
      ggplot(data_frame, mapping = aes(x=Quarters, y=UPB)) +
        geom_point()
    } else if (input$option == "mltv") {
      data_frame = quarterly_upb_to_loanamt(interest, principal, years, years_graph_)
      ggplot(data_frame, mapping = aes(x=Quarters, y=MLTV)) +
        geom_point() +
        scale_y_continuous(labels = scales::percent_format(accuracy = 1))
    }
  })
  
  # output$info <- renderText({
  #   xy_str <- function(e) {
  #     if(is.null(e)) return("NULL\n")
  #     paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
  #   }
  #   xy_range_str <- function(e) {
  #     if(is.null(e)) return("NULL\n")
  #     paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1), 
  #            " ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
  #   }
  #   
  #   paste0(
  #     "click: ", xy_str(input$plot_click),
  #     "dblclick: ", xy_str(input$plot_dblclick),
  #     "hover: ", xy_str(input$plot_hover),
  #     "brush: ", xy_range_str(input$plot_brush)
  #   )
  # })
  #
}

shinyApp(ui, server)


library(shiny)
# source("../PaymentScheduleCalculator.R")

# -------------------- Start of PaymentScheduleCalculator.R --------------------
library(ggplot2)

payments_schedule = function(annual_interest_rate, principal, years) {
  #first calculate monthly interest rate 
  #second calculate the constant monthly payment amount
  monthly_interest_rate = annual_interest_rate / 12
  payment_months = years * 12
  a = (1 + monthly_interest_rate) ^ payment_months - 1
  total_payment = principal * monthly_interest_rate * (a + 1) / a
  
  interest_payment = principal_payment = unpaid_balance = total_payments = vector("numeric", payment_months)
  upb = principal 
  for (i in 1:payment_months) {
    intrst = upb * monthly_interest_rate
    pricil = total_payment - intrst
    upb = upb - pricil
    
    
    interest_payment[i] = intrst
    principal_payment[i] = pricil
    unpaid_balance[i] = upb
    total_payments[i] = total_payment
  }
  
  df = data.frame(1:payment_months, interest_payment, principal_payment, total_payments, unpaid_balance)
  df
}

data_frame_plotter = function(data_frame) {
  knitr::kable(data_frame)
}

# data_frame_plotter(payments_schedule(.......))

vec_to_const_ratio = function(vec, denom) {
  len = length(vec)
  ret = vector("numeric", len)
  for (i in 1:len) {
    ret[i] = vec[i] / denom
  }
  ret
}

quarterly_upb_to_loanamt = function(annual_interest_rate, principal, years, years_plot = years) {
  df = payments_schedule(annual_interest_rate, principal, years)
  # ratio_vec = vec_to_const_ratio(unlist(df[5], use.names=FALSE), principal)
  ratio_vec = vec_to_const_ratio(df[[5]], principal)
  ratio_vec_ = vector("numeric", length(ratio_vec) / 3)
  
  j = 1
  for (i in seq(1, length(ratio_vec), by=3)) {
    ratio_vec_[j] = (ratio_vec[i] + ratio_vec[(i + 1)] + ratio_vec[(i + 2)]) / 3
    j = j + 1
  }
  
  plot_length = years_plot * 4
  data_frame_ = data.frame("Quarters" = 1:plot_length, "MLTV" = ratio_vec_[1:plot_length])
  data_frame_
  # ggplot(data_frame_, mapping = aes(x=Quarters, y=MLTV)) + geom_point()
}

quarterly_upb = function(annual_interest_rate, principal, years, years_plot = years) {
  df = payments_schedule(annual_interest_rate, principal, years)
  ret = df[[5]]
  ret_ = vector("numeric", length(ret) / 3)
  
  j = 1
  for (i in seq(1, length(ret), by=3)) {
    ret_[j] = (ret[i] + ret[i + 1] + ret[i + 2]) / 3
    j = j + 1
  }
  
  plot_length = years_plot * 4
  data_frame_ = data.frame("Quarters" = 1:plot_length, "UPB" = ret_[1:plot_length])
  data_frame_
}
# -------------------- End of PaymentScheduleCalculator.R --------------------

ui <- fluidPage(
  titlePanel("Quarterly MLTV Grapher"),
  
  sidebarLayout(
    # Sidebar panel for inputs ----
    sidebarPanel(
      radioButtons("option", "Graph type",
                   c("Unpaid Balance" = "upb",
                     "MLTV" = "mltv")),
      textInput("principal", "Initial Principal Amount of the Loan", value = "200000"),
      fluidRow(
        column(
          width = 12,
          div(style = "white-space: nowrap", 
              div(style="display: inline-block; width: 95%;",
                  textInput("interest", "Annual interest rate", value = "3.25", placeholder = "enter 1 for 1%"),
                 ),
              h5('%', style="display:inline-block")
              )
          ),
        ),
        textInput("years", "Mortgage Term (Years)", value = "5", placeholder = "years"),
        textInput("years_graph", "Number of years to graph", value = "5")
    ),
    
    
    mainPanel(
      plotOutput(outputId = "mltv_plot", 
                 click = "plot_click",
                 dblclick = "plot_dblclick",
                 hover = "plot_hover",
                 brush = "plot_brush"),
      verbatimTextOutput("info")
      
    )
  )
)

server <- function(input, output) {
  output$mltv_plot <- renderPlot({
    interest = as.numeric(input$interest) / 100
    principal = as.numeric(input$principal)
    years = as.numeric(input$years)
    years_graph = as.numeric(input$years_graph)
    years_graph_ = if(years_graph > years) years else years_graph
    
    if (input$option == "upb") {
      data_frame = quarterly_upb(interest, principal, years, years_graph_)
      ggplot(data_frame, mapping = aes(x=Quarters, y=UPB)) +
        geom_point(size = 3, color = "#003f5c") +
        theme(text = element_text(size=20))
    } else if (input$option == "mltv") {
      data_frame = quarterly_upb_to_loanamt(interest, principal, years, years_graph_)
      ggplot(data_frame, mapping = aes(x=Quarters, y=MLTV)) +
        geom_point(size = 3, color = "#003f5c") +
        scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
        theme(text = element_text(size=20))
    }
  })
  
  # output$info <- renderText({
  #   xy_str <- function(e) {
  #     if(is.null(e)) return("NULL\n")
  #     paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
  #   }
  #   xy_range_str <- function(e) {
  #     if(is.null(e)) return("NULL\n")
  #     paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1), 
  #            " ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
  #   }
  #   
  #   paste0(
  #     "click: ", xy_str(input$plot_click),
  #     "dblclick: ", xy_str(input$plot_dblclick),
  #     "hover: ", xy_str(input$plot_hover),
  #     "brush: ", xy_range_str(input$plot_brush)
  #   )
  # })
  #
}

shinyApp(ui, server


